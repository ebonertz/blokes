var BaseService, GraphQLService, Promise,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Promise = require('bluebird');

BaseService = require('./base');

GraphQLService = (function(superClass) {
  extend(GraphQLService, superClass);

  function GraphQLService() {
    return GraphQLService.__super__.constructor.apply(this, arguments);
  }

  GraphQLService.baseResourceEndpoint = '/graphql';

  GraphQLService.prototype.query = function(body) {
    var endpoint;
    if (!body) {
      throw new Error("Body payload is required for querying GraphQL resources.");
    }
    endpoint = this.constructor.baseResourceEndpoint;
    return this._save(endpoint, body);
  };

  GraphQLService.prototype.fetch = function() {};

  GraphQLService.prototype.save = function() {};

  GraphQLService.prototype.create = function() {};

  GraphQLService.prototype.update = function() {};

  GraphQLService.prototype["delete"] = function() {};

  GraphQLService.prototype.process = function() {};

  GraphQLService.prototype.byId = function() {};

  GraphQLService.prototype.byKey = function() {};

  GraphQLService.prototype.where = function() {};

  GraphQLService.prototype.whereOperator = function() {};

  GraphQLService.prototype.last = function() {};

  GraphQLService.prototype.sort = function() {};

  GraphQLService.prototype.page = function() {};

  GraphQLService.prototype.perPage = function() {};

  GraphQLService.prototype.all = function() {};

  GraphQLService.prototype.expand = function() {};

  GraphQLService.prototype.byQueryString = function() {};

  return GraphQLService;

})(BaseService);

module.exports = GraphQLService;
